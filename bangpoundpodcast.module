<?php

/**
 * Implements hook_entity_view().
 */
function bangpoundpodcast_entity_view($entity, $type, $view_mode, $langcode) {
  if (isset($entity->view) && !empty($entity->view->style_plugin->row_plugin) && $entity->view->style_plugin->row_plugin->plugin_name == 'podcast_rss') {
    $entity->rss_namespaces['xmlns:itunes'] = 'http://www.itunes.com/dtds/podcast-1.0.dtd';
    $entity->rss_namespaces['xmlns:atom'] = 'http://www.w3.org/2005/Atom';
    $value = field_view_field($type, $entity, 'field_image', array('type' => 'itunes_image', 'settings' => array('image_style' => 'itunes_podcast')));
    $value = field_view_field($type, $entity, 'attachment', array('type' => 'itunes_duration'));
  }
}

/**
 * Implements hook_entity_view().
 */
function bangpoundpodcast_node_view($node, $view_mode, $langcode) {
  if (isset($node->view) && !empty($node->view->style_plugin->row_plugin) && $node->view->style_plugin->row_plugin->plugin_name == 'podcast_rss') {
    $node->rss_elements[] = array(
      'key' => 'itunes:author',
      'value' => $node->name,
    );
  }
}

/**
 * Implements hook_preprocess_field().
 */
function bangpoundpodcast_preprocess_field(&$variables, $hook) {
  if ($variables['element']['#view_mode'] == 'rss') {
    $variables['theme_hook_suggestion'] = 'field__fences_no_wrapper';
  }
}

/**
 * Implements hook_preprocess_views_view_rss().
 */
function bangpoundpodcast_preprocess_views_view_rss(&$variables, $hook) {
  global $base_url;
  global $language;

  $view     = &$variables['view'];
  $options  = &$variables['options'];
  $items    = &$variables['rows'];

  $style    = &$view->style_plugin;

  if (isset($view->argument['term_node_tid_depth'])) {
    $tid = $view->argument['term_node_tid_depth']->get_value();
    if ($tid) {
      $term = taxonomy_term_load($tid);
      $items = field_get_items('taxonomy_term', $term, 'field_podcast_description');
      if ($items) {
        $value = field_view_value('taxonomy_term', $term, 'field_podcast_description', $items[0]);
        $description = drupal_render($value);
      }
      if (empty($description)) {
        $description = $term->description;
      }
      $variables['description'] = trim(check_plain(decode_entities(strip_tags($description))));

      // Drop the return values because these field formatters modify the
      // rss_elements array on the term object.
      if (field_get_items('taxonomy_term', $term, 'field_itunes_category')) {
        field_view_field('taxonomy_term', $term, 'field_itunes_category', array('type' => 'itunes_category'));
      }
      if (field_get_items('taxonomy_term', $term, 'field_itunes_category')) {
        field_view_field('taxonomy_term', $term, 'field_image', array('type' => 'itunes_image', 'settings' => array('image_style' => 'itunes_podcast')));
      }
      if (field_get_items('taxonomy_term', $term, 'field_itunes_category')) {
        field_view_field('taxonomy_term', $term, 'field_subtitle', array('type' => 'itunes_subtitle'));
      }

      $term->rss_elements[] = array(
        'key' => 'itunes:owner',
        'value' => array(
          array(
            'key' => 'itunes:email',
            'value' => variable_get('site_mail', ini_get('sendmail_from')),
          ),
          array(
            'key' => 'itunes:name',
            'value' => variable_get('site_name', 'Drupal'),
          ),
        ),
      );

      $style->channel_elements += $term->rss_elements;
    }
  }

  // Add rel=self link as suggested by <http://validator.w3.org/feed/docs/warning/MissingAtomSelfLink.html>
  $style->namespaces['xmlns:atom'] = 'http://www.w3.org/2005/Atom';
  $variables['namespaces'] = drupal_attributes($style->namespaces);
  $style->channel_elements[] = array(
    'key' => 'atom:link',
    'attributes' => array(
      'rel' => 'self',
      'type' => 'application/rss+xml',
      'href' => $variables['link'],
    ),
  );
  $variables['channel_elements'] = format_xml_elements($style->channel_elements);
}

/**
 * Implements hook_views_api().
 */
function bangpoundpodcast_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function bangpoundpodcast_field_formatter_info() {
  return array(
    'itunes_category' => array(
      'label' => t('iTunes category'),
      'field types' => array('taxonomy_term_reference'),
    ),
    'itunes_image' => array(
      'label' => t('iTunes image'),
      'field types' => array('file', 'image', 'media'),
      'settings' => array('image_style' => ''),
    ),
    'itunes_subtitle' => array(
      'label' => t('iTunes subtitle'),
      'field types' => array('text'),
    ),
    'itunes_duration' => array(
      'label' => t('iTunes duration'),
      'field types' => array('file'),
    ),
  );
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function bangpoundpodcast_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  if ($field['type'] == 'taxonomy_term_reference') {
    taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, $items, $displays);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function bangpoundpodcast_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'itunes_category':
      foreach ($items as $item) {
        $rss_element = &$entity->rss_elements;

        if ($item['tid'] == 'autocreate') {
          $rss_element[$item['tid']] = array(
            'key' => 'itunes:category',
            'attributes' => array(
              'name' => $item['name'],
            ),
          );
        }
        else {

          // Try to load parent term objects.
          $parents = taxonomy_get_parents($item['tid']);

          // Term has a parent.
          if (count($parents)) {
            $parent = array_shift($parents);

            if (!isset($rss_element[$parent->tid])) {
              $rss_element[$parent->tid] = array(
                'key' => 'itunes:category',
                'attributes' => array(
                  'text' => $parent->name,
                ),
              );
            }
            $rss_element[$parent->tid]['value'][$item['tid']] = array(
              'key' => 'itunes:category',
              'attributes' => array(
                'text' => $item['taxonomy_term']->name,
              ),
            );
          }
          else {
            $rss_element[$item['tid']] = array(
              'key' => 'itunes:category',
              'attributes' => array(
                'name' => $item['taxonomy_term']->name,
              ),
            );
          }
        }
      }
      break;

    case 'itunes_image':
      foreach ($items as $item) {

        // Media field items contain a file object and do not use display property.
        if (!isset($item['uri']) && isset($item['file'])) {
          $item = (array) $item['file'];
        }
        if (!empty($item['display']) || !isset($item['display'])) {
          $url = file_create_url($item['uri']);
          $length = $item['filesize'];
          $type = $item['filemime'];
          if ($item['type'] == 'image' && !empty($display['settings']['image_style'])) {
            $url = image_style_url($display['settings']['image_style'], $item['uri']);
            $uri = image_style_path($display['settings']['image_style'], $item['uri']);
            if ($info = image_get_info($uri)) {
              $length = $info['file_size'];
              $type = $info['mime_type'];
            }
            else {
              $info = image_get_info($item['uri']);
              image_style_transform_dimensions($display['settings']['image_style'], $info);
            }
          }
          $entity->rss_elements[] = array(
            'key' => 'itunes:image',
            'attributes' => array(
              'href' => $url,
            ),
          );
          break;
        }
      }
      break;

    case 'itunes_subtitle':
      foreach ($items as $item) {
        $entity->rss_elements[] = array(
          'key' => 'itunes:subtitle',
          'value' => strip_tags($item['value']),
        );
      }
      break;

    case 'itunes_duration':
      foreach ($items as $item) {
        $info = getid3_analyze(drupal_realpath($item['uri']));
        if (isset($info['playtime_seconds'])) {
          $entity->rss_elements[] = array(
            'key' => 'itunes:duration',
            'value' => round($info['playtime_seconds']),
          );
        }
      }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function bangpoundpodcast_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();
  if ($field['type'] == 'image') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $image_styles = image_style_options(FALSE);
    $element['image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#default_value' => $settings['image_style'],
      '#empty_option' => t('None (original image)'),
      '#options' => $image_styles,
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function bangpoundpodcast_field_formatter_settings_summary($field, $instance, $view_mode) {
  $summary = array();
  if ($field['type'] == 'image') {
    $display = $instance['display'][$view_mode];
    $settings = $display['settings'];
    $image_styles = image_style_options(FALSE);
    // Unset possible 'No defined styles' option.
    unset($image_styles['']);
    // Styles could be lost because of enabled/disabled modules that defines
    // their styles in code.
    if (isset($image_styles[$settings['image_style']])) {
      $summary[] = t('Image style: @style', array('@style' => $image_styles[$settings['image_style']]));
    }
    else {
      $summary[] = t('Original image');
    }
  }
  return implode('<br />', $summary);
}

/**
 * Implements hook_image_default_styles().
 */
function bangpoundpodcast_image_default_styles() {
  $styles = array();

  $styles['itunes_podcast'] = array(
    'effects' => array(
      array(
        'name' => 'imagecrop_javascript',
        'data' => array(
          'width' => 1400,
          'height' => 1400,
          'xoffset' => 'center',
          'yoffset' => 'center',
          'resizable' => 1,
          'downscaling' => 1,
          'aspect_ratio' => 'CROP',
          'disable_if_no_data' => 0,
        ),
        'weight' => 1,
      ),
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 1400,
          'height' => 1400,
        ),
        'weight' => 2,
      ),
    ),
  );

  return $styles;
}
